<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>昔年的博客</title>
  <subtitle>记录点滴-Double Happy Peng</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://fueling-psx.github.io/"/>
  <updated>2017-03-07T15:30:11.489Z</updated>
  <id>https://fueling-psx.github.io/</id>
  
  <author>
    <name>Fueling-psx</name>
    <email>1783495167@qq.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>初读JS中Infinity、NaN、undefined、null</title>
    <link href="https://fueling-psx.github.io/2017/03/07/jsone-file/"/>
    <id>https://fueling-psx.github.io/2017/03/07/jsone-file/</id>
    <published>2017-03-07T15:18:03.000Z</published>
    <updated>2017-03-07T15:30:11.489Z</updated>
    
    <content type="html"><![CDATA[<pre><code>首先要确定的是，js有number、string、boolean、Null、undefined和混合Object这六种数据类型。
</code></pre><h2 id="数值型理解要点（对于Infinity、NaN）："><a href="#数值型理解要点（对于Infinity、NaN）：" class="headerlink" title="数值型理解要点（对于Infinity、NaN）："></a>数值型理解要点（对于Infinity、NaN）：</h2><p>对于数值型number来说。 js中只有这个单一的数字类型。它在内部表示为64位的浮点数（大部分浮点数只能近似地表达小数点以后的部分）。和java的double型一样。所以1和1.0是相同的值。那么算的话便是浮点数运算了，所以运行效率便有所下降，并且js也不是计算语言合适的选择。</p>
<p>那么说到数值型就要说这两个值Infinity、NaN了：</p>
<a id="more"></a>    
<p>首先要理解这两个值出自于哪里，是做什么用的？</p>
<hr>
<p>   其中Infinity和NaN均出自于js中全局对象，为全局属性（也可以作为全局变量，但只可读）。而 js对这两个值定义是：<em>Infinity是存放“表示正无穷大的数值”</em>，<em>NaN是代表非数字的特殊值，用于指示某个值不是数字。</em></p>
<p>   举个例子：数值运算中js的整数型运算，但实际上还是浮点数运算。比如对0做除法不会出错，会得到Infinity（即返回无穷大），其中0除0是没有意义的，比如像无穷大除以无穷大，给负数做开方运算，均是没有意义的，像这种情况的都返回NaN。</p>
<hr>
<p>ps:需要说明的是，js以 NaN的形式来输出Number.NaN，并且，NaN由于是特殊值，它与其他数值的比较总是不相等的，而只能用isNaN( )函数来比较。</p>
<p>知道了这么多，对于大部分Infinity、NaN的问题就可以解释了：</p>
<pre><code>１.typeof(NaN) ,typeof(Infinity)   // 两个都输出number
2.NaN == NaN                       // false
3.NaN != NaN                       // true ,这个以命题来解释，NaN的确不能与它自身比较，即不相等
4.NaN >= NaN                       // false ,比较无意义 
5."123abc" - 0                     // NaN ,"123abc"强制转换结果是NaN
6.Infinity > 10                    // true ,无穷大
7.Infinity == NaN                  // false</code></pre>

<h2 id="那对于undefined和Null"><a href="#那对于undefined和Null" class="headerlink" title="那对于undefined和Null"></a>那对于undefined和Null</h2><p>首先来看下这两个值定义及出处：</p>
<ul>
<li><p>undefined是undefined型中的属性，返回一个初始值，表示未定义或者对象属性不存在。浅理解为就是缺少一个值。</p>
</li>
<li><p>而Null有几种身份，首先其表示为一种数据类型，且只有一个值：Null；其次它是关键字，即不能用作函数名和变量名；所以其用作null的变量表示“无值、无对象”。在逻辑角度上讲，null值表现为一个空对象指针。</p>
<p>我们看一下例子：</p>
<pre><code>typeof null;   // Object(bug)
typeof undefined;    // Undefined
Object.prototype.toString.call(null);   //Null
null == underfined  //true</code></pre>




</li>
</ul>
<p>从数值运算来说，它们两做布尔运算或判断时值都是相等的——false。<br>而不同点就是首先类型不同，null是字面量，不可更改，在js中期望引入一个对象，相当于空引用指针。而undefined作为undefined的一个属性，就是表示该变量或对象属性没有赋值。</p>
]]></content>
    
    <summary type="html">
    
      &lt;pre&gt;&lt;code&gt;首先要确定的是，js有number、string、boolean、Null、undefined和混合Object这六种数据类型。
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;数值型理解要点（对于Infinity、NaN）：&quot;&gt;&lt;a href=&quot;#数值型理解要点（对于Infinity、NaN）：&quot; class=&quot;headerlink&quot; title=&quot;数值型理解要点（对于Infinity、NaN）：&quot;&gt;&lt;/a&gt;数值型理解要点（对于Infinity、NaN）：&lt;/h2&gt;&lt;p&gt;对于数值型number来说。 js中只有这个单一的数字类型。它在内部表示为64位的浮点数（大部分浮点数只能近似地表达小数点以后的部分）。和java的double型一样。所以1和1.0是相同的值。那么算的话便是浮点数运算了，所以运行效率便有所下降，并且js也不是计算语言合适的选择。&lt;/p&gt;
&lt;p&gt;那么说到数值型就要说这两个值Infinity、NaN了：&lt;/p&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="https://fueling-psx.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>CSS样式选择器</title>
    <link href="https://fueling-psx.github.io/2017/03/06/cssone-file/"/>
    <id>https://fueling-psx.github.io/2017/03/06/cssone-file/</id>
    <published>2017-03-06T15:24:11.000Z</published>
    <updated>2017-03-07T15:30:12.492Z</updated>
    
    <content type="html"><![CDATA[<p>首先，外联样式表通过<link>标签表现于三种形式，持久样式表、自选样式表、替代样式表。对于<link>标签来说， itle属性很重要，持久样式表没有title属，而替代样式表属性中rel=”alternate tylesheet”。</p>
<p>可以使用meta元素来设置自选样式表：<br>    <pre><code><meta http-equiv="Default-Style" content="select theme"></code></pre></p>
<p>&lt;link rel=”alternate stylesheet” href=”css/theme1.css /&gt;</p>
<p>CSS3选择器有以下几种：</p>
<a id="more"></a>    
<ol>
<li><p>元素选择器：</p>
<pre><code>通用元素选择器:    * { }
class类选择器：    .error { }
id选择器：         #id { }
类型选择器：       p { }</code></pre>
</li>
<li><p>关系选择器：</p>
<pre><code>E F 包含选择符:     选择所有被E元素包含的F元素。 
E>F 子选择符选择：  所有作为E元素的子元素F。 
E+F 相邻选择符： 选择紧贴在E元素之后F元素。 
E~F 兄弟选择符： 选择E元素所有兄弟元素F。</code></pre>
</li>
<li><p>属性选择器：</p>
 <pre><code>E[att] ：选择具有att属性的E元素。 
E[att="val"] ： 选择具有att属性且属性值等于val的E元素。 
E[att$="val"] ： 选择具有att属性且属性值为以val结尾的字符串的E元素。 
E[att*="val"] ： 选择具有att属性且属性值为包含val的字符串的E元素。 </code></pre>
</li>
<li><p>伪类选择器：</p>
 <pre><code>E:link：设置超链接a在未被访问前的样式。 
E:visited：设置超链接a在其链接地址已被访问过时的样式。 
E:hover ：设置元素在其鼠标悬停时的样式。 
E:active ： 设置元素在被用户激活（在鼠标点击与释放之间发生的事件）时的样式。 
E:focus：设置元素在成为输入焦点（该元素的onfocus事件发生）时的样式。 </code></pre>
</li>
<li><p>伪对象选择器：</p>
 <pre><code>E:first-letter/E::first-letter ： 设置对象内的第一个字符的样式。 
E:first-line/E::first-line ： 设置对象内的第一行的样式。 
E:before/E::before ： 设置在对象前（依据对象树的逻辑结构）发生的内容。
E:after/E::after ： 设置在对象后（依据对象树的逻辑结构）发生的内容。
E::selection ： 设置对象被选择时的颜色。  </code></pre>    </li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;首先，外联样式表通过&lt;link /&gt;标签表现于三种形式，持久样式表、自选样式表、替代样式表。对于&lt;link&gt;标签来说， itle属性很重要，持久样式表没有title属，而替代样式表属性中rel=”alternate tylesheet”。&lt;/p&gt;
&lt;p&gt;可以使用meta元素来设置自选样式表：&lt;br&gt;    &lt;pre&gt;&lt;code&gt;&lt;meta http-equiv=&quot;Default-Style&quot; content=&quot;select theme&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;link rel=”alternate stylesheet” href=”css/theme1.css /&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;CSS3选择器有以下几种：&lt;/p&gt;
    
    </summary>
    
    
      <category term="CSS3" scheme="https://fueling-psx.github.io/tags/CSS3/"/>
    
  </entry>
  
  <entry>
    <title>浅谈用Hexo搭建GitHub博客</title>
    <link href="https://fueling-psx.github.io/2017/03/06/hexo-file/"/>
    <id>https://fueling-psx.github.io/2017/03/06/hexo-file/</id>
    <published>2017-03-06T02:30:50.000Z</published>
    <updated>2017-03-07T12:34:18.211Z</updated>
    
    <content type="html"><![CDATA[<p>在GitHub上一般是用Hexo搭建博客，而搭建博客则是要清楚应分为几个步骤去做：</p>
<p>首先要有个github账号</p>
<ol>
<li><p>搭建环境，安装node.js、git，这几步安装的话，没有坑，一般都可以完成，所以不做过多详细说明了</p>
</li>
<li><p>hexo的安装配置（<em>注意：hexo的不同版本很多配置是不一样的</em>）</p>
<a id="more"></a>        
<p>  a. hexo安装:<br> hexo是一款基于Node.js的静态博客框架。首先创建一个自定义文件夹<br> 在命令行进入此文件夹下，输入安装命令：<br> <code>npm install hexo-cli -g</code><br> <code>npm install hexo --save</code></p>
<p> 输入命令后就会安装完毕，在命令行输入<br> <code>hexo -v</code><br> 如果看到了很多行hexo版本及信息，就安装成功了</p>
<p> b. hexo配置：    接着输入命令行：</p>
 <pre><code>hexo init
 npm install
 hexo g</code></pre>

<p> c. 查看是否部署静态博客成功了的话，输入命令行：</p>
<pre><code>`hexo s`
就会提示：`INFO Hexo is running at http://0.0.0.0:4000/. Press Ctrl+C to stop.`
        然后在浏览器打开http://localhost:4000/就可以在本地预览了。

ps: 觉得主题不好看的话可以去Github上下载主题，下载到本地目录 themes下就可以了。
</code></pre></li>
<li><p>写文章的话，可以在命令行输入：</p>
<p><code>hexo new &quot;your article file&quot;</code></p>
<p>部署，发布：</p>
<pre><code> hexo g
hexo d</code></pre>

<p>在 \source_posts下找到新建的md文件，可以用markdown打开编写,例：</p>
<pre><code>![](http://i.imgur.com/CtzuYRn.png)
</code></pre></li>
</ol>
<ol>
<li>然后就完成了。<br>下面是一些hexo简单命令： <pre><code>hexo new "postName" #新建文章
 hexo new page "pageName" #新建页面
 hexo generate #生成静态页面至public目录
 hexo server #开启预览访问端口（默认端口4000，'ctrl + c'关闭server）
 hexo deploy #部署到GitHub
 hexo help  # 查看帮助
 hexo version  #查看Hexo的版本
 </code></pre>
缩写和组合命令：
 <pre><code>hexo n == hexo new
 hexo g == hexo generate
 hexo s == hexo server
 hexo d == hexo deploy
 hexo s -g #生成并本地预览
 hexo d -g #生成并上传
 </code></pre>


</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在GitHub上一般是用Hexo搭建博客，而搭建博客则是要清楚应分为几个步骤去做：&lt;/p&gt;
&lt;p&gt;首先要有个github账号&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;搭建环境，安装node.js、git，这几步安装的话，没有坑，一般都可以完成，所以不做过多详细说明了&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;hexo的安装配置（&lt;em&gt;注意：hexo的不同版本很多配置是不一样的&lt;/em&gt;）&lt;/p&gt;
    
    </summary>
    
    
      <category term="Hexo" scheme="https://fueling-psx.github.io/tags/Hexo/"/>
    
      <category term="GitHub" scheme="https://fueling-psx.github.io/tags/GitHub/"/>
    
  </entry>
  
  <entry>
    <title>学习HTML-语义化</title>
    <link href="https://fueling-psx.github.io/2017/03/03/first-file/"/>
    <id>https://fueling-psx.github.io/2017/03/03/first-file/</id>
    <published>2017-03-03T08:04:39.000Z</published>
    <updated>2017-03-06T15:26:18.713Z</updated>
    
    <content type="html"><![CDATA[<p>我们知道HTML5是W3C对以前HTML4.01版本的补充和修订，支持了很多页面交互的元素标签，并提出了HTML的编写规范标准，其中就包括语义化HTMl文档。那么html的语义化有什么用处和作用呢。</p>
<p>“ HTML的元素、属性和属性值都定义了某种含义。如lang属性就代表内容的语言。作者不能以它们本身合理的语s义目的之外的方式来使用元素、属性和属性值。“<br>                                                                                ——WHATWG   标准</p>
<p>● HTML语义化的理解<br><a id="more"></a><br>    定义上是说语义化的HTMl是描述文档内容类型的HTML元素。也就是可以这样理解为html语义化是以规范标准来书写html文档，使得结构层次清晰明了，不必写过多的div，从而帮助浏览器更好地读懂html文档（浏览器以前解析html的话，若无正确语义标识，浏览器很难解析html文档的标签内容）。比如根据html5大纲算法，语义化html文档应是用区块元素，即是用section、article、aside和nav这四种。</p>
<p>简单来说就是语义化的作用是使书写HTML文档结构具有语义性，即层次结构符合标准规范。</p>
<ol>
<li>使得浏览器解析时能更好的读懂我们书写的html文档结构排布，便于浏览器快速地解析文档，渲染页面。</li>
<li>自然而然我们人也能便于读懂HTML文档。也便于后期修改维护页面。</li>
<li>还有一个就是方便搜索引擎抓取页面内容（也就是使搜索引擎更好理解）。</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我们知道HTML5是W3C对以前HTML4.01版本的补充和修订，支持了很多页面交互的元素标签，并提出了HTML的编写规范标准，其中就包括语义化HTMl文档。那么html的语义化有什么用处和作用呢。&lt;/p&gt;
&lt;p&gt;“ HTML的元素、属性和属性值都定义了某种含义。如lang属性就代表内容的语言。作者不能以它们本身合理的语s义目的之外的方式来使用元素、属性和属性值。“&lt;br&gt;                                                                                ——WHATWG   标准&lt;/p&gt;
&lt;p&gt;● HTML语义化的理解&lt;br&gt;
    
    </summary>
    
    
      <category term="html" scheme="https://fueling-psx.github.io/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>随笔感悟</title>
    <link href="https://fueling-psx.github.io/2017/03/03/hello-world/"/>
    <id>https://fueling-psx.github.io/2017/03/03/hello-world/</id>
    <published>2017-03-03T07:42:41.170Z</published>
    <updated>2017-03-06T15:21:33.650Z</updated>
    
    <content type="html"><![CDATA[<p>在写博客中积累自己的知识和经验，积极与他人分享和交流想法——我最初的想法而已</p>
<p>我自己感性时比较文艺，理性时喜欢逻辑思考一些东西，也有自己的想法。平时热爱运动，喜欢踢球，愿意<br>与他人分享喜悦。博客呢，就会记录我平时的一些感想点滴和心情日记（主要还是写技术了。。。）。</p>
<p>热爱自己所从事的专业，喜欢前端、喜欢GitHub上的绿点点、喜欢刷算法题看到Accepted。</p>
<a id="more"></a>
<p>所以啊，记录点滴，新的一天，新的开始</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在写博客中积累自己的知识和经验，积极与他人分享和交流想法——我最初的想法而已&lt;/p&gt;
&lt;p&gt;我自己感性时比较文艺，理性时喜欢逻辑思考一些东西，也有自己的想法。平时热爱运动，喜欢踢球，愿意&lt;br&gt;与他人分享喜悦。博客呢，就会记录我平时的一些感想点滴和心情日记（主要还是写技术了。。。）。&lt;/p&gt;
&lt;p&gt;热爱自己所从事的专业，喜欢前端、喜欢GitHub上的绿点点、喜欢刷算法题看到Accepted。&lt;/p&gt;
    
    </summary>
    
    
      <category term="随笔" scheme="https://fueling-psx.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
</feed>
